$date
	Mon Oct  2 01:25:13 2017
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module simulate $end
$var wire 8 ! Result [7:0] $end
$var reg 1 " clk $end
$var reg 1 # reset $end
$var reg 1 $ reset_reg $end
$scope module pro $end
$var wire 8 % Address [7:0] $end
$var wire 3 & INaddr [2:0] $end
$var wire 8 ' Immediate [7:0] $end
$var wire 32 ( Instruction [31:0] $end
$var wire 8 ) OPCODE [7:0] $end
$var wire 8 * OUT1 [7:0] $end
$var wire 3 + OUT1addr [2:0] $end
$var wire 8 , OUT2 [7:0] $end
$var wire 3 - OUT2addr [2:0] $end
$var wire 1 . Read $end
$var wire 32 / Read_addr [31:0] $end
$var wire 8 0 Result [7:0] $end
$var wire 1 1 Wait $end
$var wire 1 2 Write $end
$var wire 1 3 clk $end
$var wire 1 4 mux0 $end
$var wire 8 5 mux0out [7:0] $end
$var wire 1 6 mux1 $end
$var wire 8 7 mux1out [7:0] $end
$var wire 1 8 mux2 $end
$var wire 8 9 mux2out [7:0] $end
$var wire 1 : mux4 $end
$var wire 8 ; mux4out [7:0] $end
$var wire 8 < read_data [7:0] $end
$var wire 1 = reset $end
$var wire 1 > reset_reg $end
$var wire 1 ? rst $end
$var wire 3 @ select [2:0] $end
$var wire 8 A twosComplement0 [7:0] $end
$var wire 8 B twosComplement1 [7:0] $end
$scope module count $end
$var wire 1 3 clk $end
$var wire 1 = reset $end
$var reg 32 C Read_addr [31:0] $end
$upscope $end
$scope module insReg $end
$var wire 1 3 clk $end
$var wire 32 D read_addr [31:0] $end
$var reg 32 E instruction [31:0] $end
$upscope $end
$scope module cont $end
$var wire 3 F INaddr [2:0] $end
$var wire 8 G OPcode [7:0] $end
$var wire 3 H OUT1addr [2:0] $end
$var wire 3 I OUT2addr [2:0] $end
$var wire 8 J immediate [7:0] $end
$var wire 32 K instruction [31:0] $end
$var wire 3 L select [2:0] $end
$var reg 1 M Wait $end
$var reg 8 N address [7:0] $end
$var reg 1 O mux_four $end
$var reg 1 P mux_one $end
$var reg 1 Q mux_three $end
$var reg 1 R mux_two $end
$var reg 1 S read $end
$var reg 1 T write $end
$upscope $end
$scope module datamem1 $end
$var wire 8 U address [7:0] $end
$var wire 1 3 clk $end
$var wire 1 . read $end
$var wire 1 ? rst $end
$var wire 1 2 write $end
$var wire 8 V write_data [7:0] $end
$var reg 1 W busy_wait $end
$var integer 32 X i [31:0] $end
$var reg 8 Y read_data [7:0] $end
$upscope $end
$scope module m4 $end
$var wire 8 Z in1 [7:0] $end
$var wire 8 [ in2 [7:0] $end
$var wire 8 \ out [7:0] $end
$var wire 1 : select $end
$upscope $end
$scope module regs $end
$var wire 8 ] IN [7:0] $end
$var wire 3 ^ INaddr [2:0] $end
$var wire 8 _ OUT1 [7:0] $end
$var wire 3 ` OUT1addr [2:0] $end
$var wire 8 a OUT2 [7:0] $end
$var wire 3 b OUT2addr [2:0] $end
$var wire 1 3 clk $end
$var reg 8 c reg0 [7:0] $end
$var reg 8 d reg1 [7:0] $end
$var reg 8 e reg2 [7:0] $end
$var reg 8 f reg3 [7:0] $end
$var reg 8 g reg4 [7:0] $end
$var reg 8 h reg5 [7:0] $end
$var reg 8 i reg6 [7:0] $end
$var reg 8 j reg7 [7:0] $end
$upscope $end
$scope module two1 $end
$var wire 8 k in [7:0] $end
$var wire 8 l out [7:0] $end
$var wire 8 m x [7:0] $end
$upscope $end
$scope module two2 $end
$var wire 8 n in [7:0] $end
$var wire 8 o out [7:0] $end
$var wire 8 p x [7:0] $end
$upscope $end
$scope module m0 $end
$var wire 8 q in1 [7:0] $end
$var wire 8 r in2 [7:0] $end
$var wire 8 s out [7:0] $end
$var wire 1 4 select $end
$upscope $end
$scope module m1 $end
$var wire 8 t in1 [7:0] $end
$var wire 8 u in2 [7:0] $end
$var wire 8 v out [7:0] $end
$var wire 1 6 select $end
$upscope $end
$scope module m2 $end
$var wire 8 w in1 [7:0] $end
$var wire 8 x in2 [7:0] $end
$var wire 8 y out [7:0] $end
$var wire 1 8 select $end
$upscope $end
$scope module alu $end
$var wire 8 z DATA1 [7:0] $end
$var wire 8 { DATA2 [7:0] $end
$var wire 3 | Select [2:0] $end
$var reg 8 } Result [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b101 }
b0 |
bx {
b101 z
bx y
bx x
bx w
b101 v
bx u
b101 t
bx s
bx r
bx q
bx p
bx o
bx n
bx m
bx l
bx k
bx j
bx i
bx h
bx g
bx f
bx e
bx d
bx c
b0 b
bx a
b101 `
bx _
b11 ^
b101 ]
b101 \
b101 [
bx Z
bx Y
bx X
xW
b101 V
bx U
0T
0S
1R
1Q
xP
0O
bx N
xM
b0 L
b1000000000110000000000000101 K
b101 J
b0 I
b101 H
b1000 G
b11 F
b1000000000110000000000000101 E
b1 D
b1 C
bx B
bx A
b0 @
z?
0>
0=
bx <
b101 ;
0:
bx 9
18
b101 7
16
bx 5
x4
03
02
x1
b101 0
b1 /
0.
b0 -
bx ,
b101 +
bx *
b1000 )
b1000000000110000000000000101 (
b101 '
b11 &
bx %
0$
0#
0"
b101 !
$end
#10
1"
13
#20
b1001 ;
b1001 \
b1001 ]
b1001 }
b1001 !
b1001 0
b1001 V
b1001 [
b1001 7
b1001 v
b1001 z
b1 +
b1 H
b1 `
b100 &
b100 F
b100 ^
b1001 '
b1001 J
b1001 t
b1000000001000000000000001001 E
b1000000001000000000000001001 (
b1000000001000000000000001001 K
b101 f
b10 C
b10 /
b10 D
0"
03
#30
1"
13
#40
0W
x1
b11111010 m
b11111011 A
b11111011 l
b11111011 r
b101 5
b101 s
b101 u
b101 *
b101 _
b101 k
b101 q
b101 ;
b101 \
b101 ]
b101 }
b101 !
b101 0
b101 V
b101 [
b101 7
b101 v
b101 z
b11010 N
b11010 %
b11010 U
0R
06
1P
14
1M
1T
12
b11 +
b11 H
b11 `
b10 &
b10 F
b10 ^
b11 '
b11 J
b11 t
b10000 )
b10000 G
b10000000110100000000000000011 E
b10000000110100000000000000011 (
b10000000110100000000000000011 K
b11 C
b11 /
b11 D
b1001 g
0"
03
#50
1"
13
#60
b11110110 p
b11110111 B
b11110111 o
b11110111 x
b1001 9
b1001 y
b1001 {
b1001 ,
b1001 a
b1001 n
b1001 w
b1110 ;
b1110 \
b1110 ]
b1110 }
b1110 !
b1110 0
b1110 V
b1110 [
0T
02
b1 @
b1 L
b1 |
b100 -
b100 I
b100 b
b0 &
b0 F
b0 ^
b1 )
b1 G
b1000000000000010000000011 E
b1000000000000010000000011 (
b1000000000000010000000011 K
b101 e
b100 C
b100 /
b100 D
0"
03
#70
1"
13
#80
0W
x1
b11110001 p
b11110010 B
b11110010 o
b11110010 x
b1110 9
b1110 y
b1110 {
b101 ;
b101 \
b101 ]
b101 Y
b101 <
b101 Z
b101 }
b101 !
b101 0
b101 V
b101 [
b1110 ,
b1110 a
b1110 n
b1110 w
b11010 N
1O
1:
1S
1.
b0 @
b0 L
b0 |
b10 +
b10 H
b10 `
b0 -
b0 I
b0 b
b110 &
b110 F
b110 ^
b11010 '
b11010 J
b11010 t
b11000 )
b11000 G
b11000000001100000000000011010 E
b11000000001100000000000011010 (
b11000000001100000000000011010 K
b101 C
b101 /
b101 D
b1110 c
0"
03
#90
1"
13
#100
0W
x1
b1001 ;
b1001 \
b1001 ]
b1001 }
b1001 !
b1001 0
b1001 V
b1001 [
b1001 7
b1001 v
b1001 z
b11110110 m
b11110111 A
b11110111 l
b11110111 r
b1001 5
b1001 s
b1001 u
b1001 *
b1001 _
b1001 k
b1001 q
b10000 N
b10000 %
b10000 U
0O
0:
1T
12
0S
0.
b100 +
b100 H
b100 `
b0 &
b0 F
b0 ^
b100 '
b100 J
b100 t
b10000 )
b10000 G
b10000000100000000000000000100 E
b10000000100000000000000000100 (
b10000000100000000000000000100 K
b101 i
b110 C
b110 /
b110 D
0"
03
#110
1"
13
#120
b11111010 m
b11111011 A
b11111011 l
b11111011 r
b101 *
b101 _
b101 k
b101 q
b11111011 7
b11111011 v
b11111011 z
b11111011 5
b11111011 s
b11111011 u
b100 ;
b100 \
b100 ]
0T
02
0P
04
b100 }
b100 !
b100 0
b100 V
b100 [
b1 @
b1 L
b1 |
b11 +
b11 H
b11 `
b100 -
b100 I
b100 b
b1 &
b1 F
b1 ^
b11 '
b11 J
b11 t
b1001 )
b1001 G
b11110110 p
b11110111 B
b11110111 o
b11110111 x
b1001 9
b1001 y
b1001 {
b1001000000010000010000000011 E
b1001000000010000010000000011 (
b1001000000010000010000000011 K
b1001 ,
b1001 a
b1001 n
b1001 w
b111 C
b111 /
b111 D
b1001 c
0"
03
#130
1"
13
#140
0W
x1
b1001 7
b1001 v
b1001 z
b11110110 m
b11110111 A
b11110111 l
b11110111 r
b1001 ;
b1001 \
b1001 ]
b1001 5
b1001 s
b1001 u
b1001 Y
b1001 <
b1001 Z
b1001 }
b1001 !
b1001 0
b1001 V
b1001 [
b1001 *
b1001 _
b1001 k
b1001 q
b10000 N
1O
1:
1P
14
1S
1.
b0 @
b0 L
b0 |
b0 +
b0 H
b0 `
b0 -
b0 I
b0 b
b111 &
b111 F
b111 ^
b10000 '
b10000 J
b10000 t
b11000 )
b11000 G
b11000000001110000000000010000 E
b11000000001110000000000010000 (
b11000000001110000000000010000 K
b100 d
b1000 C
b1000 /
b1000 D
0"
03
#150
1"
13
#160
b1001 7
b1001 v
b1001 z
b11110110 m
b11110111 A
b11110111 l
b11110111 r
b1001 5
b1001 s
b1001 u
b11111010 p
b11111011 B
b11111011 o
b11111011 x
b101 9
b101 y
b101 {
b1110 ;
b1110 \
b1110 ]
b1110 }
b1110 !
b1110 0
b1110 V
b1110 [
b1001 *
b1001 _
b1001 k
b1001 q
b101 ,
b101 a
b101 n
b101 w
0S
0.
0O
0:
b1 @
b1 L
b1 |
b111 +
b111 H
b111 `
b110 -
b110 I
b110 b
b0 &
b0 F
b0 ^
b111 '
b111 J
b111 t
b1 )
b1 G
b1000000000000011000000111 E
b1000000000000011000000111 (
b1000000000000011000000111 K
b1001 C
b1001 /
b1001 D
b1001 j
0"
03
#170
1"
13
#180
b1110 c
b1010 C
b1010 /
b1010 D
0"
03
